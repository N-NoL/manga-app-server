{"version":3,"sources":["logo.svg","users.js","comment.js","chapter.js","news.js","manga.js","authProvider.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PurpleTextField","record","source","Filter1","props","Filter","SearchInput","label","alwaysOn","UserList","List","filters","title","Datagrid","rowClick","TextField","EmailField","BooleanField","DateField","EditButton","UserEdit","Edit","SimpleForm","TextInput","disabled","NumberInput","step","max","min","BooleanInput","DateInput","CommentList","CommentEdit","ChapterList","ChapterEdit","ArrayInput","SimpleFormIterator","NewsCreate","Create","NewsEdit","MangaList","NumberField","MangaEdit","authProvider","login","username","password","request","Request","process","method","body","JSON","stringify","headers","Headers","fetch","then","response","status","Error","statusText","json","user","console","log","decodedToken","decodeJwt","access_token","isAdmin","localStorage","setItem","logout","removeItem","Promise","resolve","checkError","error","checkAuth","getItem","reject","getPermissions","role","dataProvider","crudProvider","url","options","Accept","atoken","set","fetchUtils","fetchJson","App","Admin","Resource","name","list","edit","ListGuesser","EditGuesser","create","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8d3b489b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import * as React from \"react\";\r\nimport { \r\n    List,\r\n    Datagrid,\r\n    TextField,\r\n    EmailField,\r\n    UrlField,\r\n    EditButton,\r\n    BooleanField,\r\n    DateField,\r\n    Edit,\r\n    SimpleForm,\r\n    TextInput,\r\n    SelectInput,\r\n    ReferenceInput,\r\n    NumberInput,\r\n    BooleanInput,\r\n    DateInput,\r\n    SelectField,\r\n    MenuItem,Filter,SearchInput\r\n} from 'react-admin';\r\n\r\nconst PurpleTextField = ({ record,source }) => (\r\n    <span>{record[source]===0?\"не определен\":record[source]===1?\"мужчина\":\"женщина\"}</span>\r\n);\r\nconst Filter1 = props => (\r\n    <Filter {...props}>\r\n        <SearchInput label=\"username\" source=\"username\" alwaysOn />\r\n        {/* <SearchInput label=\"banStatus\" source=\"banStatus\" alwaysOn /> */}\r\n    </Filter>\r\n);\r\nexport const UserList = props => (\r\n    <List {...props} filters={<Filter1 />} title=\"Список пользователей\">\r\n        <Datagrid rowClick=\"edit\">\r\n            <TextField source=\"id\" />\r\n            <TextField source=\"username\" />\r\n            <EmailField source=\"email\" />\r\n            <PurpleTextField source=\"gender\" />\r\n            <TextField source=\"banStatus\" />\r\n            <BooleanField source=\"isAdmin\" />\r\n            <BooleanField source=\"isOnline\" />\r\n            <BooleanField source=\"showProfile\" />\r\n            <BooleanField source=\"friendliness\" />\r\n            <DateField source=\"createdAt\" />\r\n            {/* <TextField source=\"isAdmin\" />\r\n            <UrlField source=\"website\" />\r\n            <TextField source=\"company.name\" /> */}\r\n            <EditButton />\r\n        </Datagrid>\r\n    </List>\r\n);\r\n\r\n\r\nexport const UserEdit = props => (\r\n    <Edit {...props}>\r\n        <SimpleForm>\r\n            <TextInput disabled source=\"id\" />\r\n            {/* <ReferenceInput source=\"userId\" reference=\"users\">\r\n                <SelectInput optionText=\"id\" />\r\n                <SelectInput optionText=\"name\" />\r\n            </ReferenceInput> */}\r\n\r\n            <TextInput source=\"email\" />\r\n            <TextInput source=\"username\" />\r\n            <TextInput source=\"location\" />\r\n            <TextInput source=\"firstName\" />\r\n            <TextInput source=\"lastName\" />\r\n            <NumberInput step={1} max={2} min={0} source=\"gender\" />\r\n            <TextInput source=\"imgUrl\" />\r\n            <TextInput source=\"coverUrl\" />\r\n            <BooleanInput source=\"isAdmin\"/>\r\n            <BooleanInput source=\"isOnline\"/>\r\n            <BooleanInput source=\"showProfile\"/>\r\n            <BooleanInput source=\"friendliness\"/>\r\n            <NumberInput source=\"banStatus\" />\r\n            <DateInput source=\"createdAt\" />\r\n            <DateInput source=\"updatedAt\" />\r\n            {/* <TextInput source=\"body\" />\r\n            <TextInput multiline source=\"body\" /> */}\r\n        </SimpleForm>\r\n    </Edit>\r\n);","import * as React from \"react\";\r\nimport { \r\n    List,\r\n    Datagrid,\r\n    TextField,\r\n    EmailField,\r\n    UrlField,\r\n    EditButton,\r\n    BooleanField,\r\n    DateField,\r\n    Edit,\r\n    SimpleForm,\r\n    TextInput,\r\n    SelectInput,\r\n    ReferenceInput,\r\n    NumberInput,\r\n    BooleanInput,\r\n    DateInput,SearchInput,Filter\r\n\r\n} from 'react-admin';\r\n\r\nconst PurpleTextField = ({ record,source }) => (\r\n    <span>{record[source]===0?\"не определен\":record[source]===1?\"мужчина\":\"женщина\"}</span>\r\n);\r\nconst Filter1 = props => (\r\n    <Filter {...props}>\r\n        <SearchInput label=\"comment\" source=\"comment\" alwaysOn />\r\n        {/* <SearchInput label=\"banStatus\" source=\"banStatus\" alwaysOn /> */}\r\n    </Filter>\r\n);\r\nexport const CommentList = props => (\r\n    <List {...props} filters={<Filter1 />} title=\"Список пользователей\">\r\n        <Datagrid rowClick=\"edit\">\r\n            <TextField source=\"id\" />\r\n            <TextField source=\"userId\" />\r\n            <TextField source=\"mangaId\" />\r\n            <TextField source=\"value\" />\r\n            <TextField source=\"comment\" />\r\n            <TextField source=\"banStatus\" />\r\n            <DateField source=\"createdAt\" />\r\n            {/* <TextField source=\"username\" />\r\n            <EmailField source=\"email\" />\r\n            <PurpleTextField source=\"gender\" />\r\n            <TextField source=\"banStatus\" />\r\n            <BooleanField source=\"isAdmin\" />\r\n            <BooleanField source=\"isOnline\" />\r\n            <BooleanField source=\"showProfile\" />\r\n            <BooleanField source=\"friendliness\" />\r\n            <DateField source=\"createdAt\" />\r\n            {/* <TextField source=\"isAdmin\" />\r\n            <UrlField source=\"website\" />\r\n            <TextField source=\"company.name\" /> */}\r\n            <EditButton /> \r\n        </Datagrid>\r\n    </List>\r\n);\r\n\r\n\r\nexport const CommentEdit = props => (\r\n    <Edit {...props}>\r\n        <SimpleForm>\r\n            <TextInput disabled source=\"id\" />\r\n            {/* <ReferenceInput source=\"userId\" reference=\"users\">\r\n                <SelectInput optionText=\"id\" />\r\n                <SelectInput optionText=\"name\" />\r\n            </ReferenceInput> */}\r\n            <NumberInput disabled source=\"userId\" />\r\n            <NumberInput disabled source=\"mangaId\" />\r\n            <TextField source=\"value\" />\r\n            <TextField source=\"comment\" />\r\n            <NumberInput source=\"banStatus\" />\r\n\r\n            <DateInput source=\"createdAt\" />\r\n            {/* <TextInput source=\"body\" />\r\n            <TextInput multiline source=\"body\" /> */}\r\n        </SimpleForm>\r\n    </Edit>\r\n);","import * as React from \"react\";\r\nimport { \r\n    List,\r\n    Datagrid,\r\n    TextField,\r\n    EmailField,\r\n    UrlField,\r\n    EditButton,\r\n    BooleanField,\r\n    DateField,\r\n    Edit,\r\n    SimpleForm,\r\n    TextInput,\r\n    SelectInput,\r\n    ReferenceInput,\r\n    NumberInput,\r\n    ArrayInput, SimpleFormIterator,BooleanInput,\r\n    DateInput\r\n} from 'react-admin';\r\n\r\nconst PurpleTextField = ({ record,source }) => (\r\n    <span>{record[source]===0?\"не определен\":record[source]===1?\"мужчина\":\"женщина\"}</span>\r\n);\r\n\r\nexport const ChapterList = props => (\r\n    <List {...props} title=\"Список пользователей\">\r\n        <Datagrid rowClick=\"edit\">\r\n            <TextField source=\"id\" />\r\n            {/* <TextField source=\"userId\" /> */}\r\n            <TextField source=\"mangaId\" />\r\n            <TextField source=\"volume\" />\r\n            <TextField source=\"chapter\" />\r\n            <TextField source=\"title\" />\r\n            <TextField source=\"banStatus\" />\r\n            <DateField source=\"createdAt\" />\r\n            <DateField source=\"updatedAt\" />\r\n            {/* <TextField source=\"username\" />\r\n            <EmailField source=\"email\" />\r\n            <PurpleTextField source=\"gender\" />\r\n            <TextField source=\"banStatus\" />\r\n            <BooleanField source=\"isAdmin\" />\r\n            <BooleanField source=\"isOnline\" />\r\n            <BooleanField source=\"showProfile\" />\r\n            <BooleanField source=\"friendliness\" />\r\n            <DateField source=\"createdAt\" />\r\n            {/* <TextField source=\"isAdmin\" />\r\n            <UrlField source=\"website\" />\r\n            <TextField source=\"company.name\" /> */}\r\n            <EditButton /> \r\n        </Datagrid>\r\n    </List>\r\n);\r\n\r\n\r\nexport const ChapterEdit = props => (\r\n    <Edit {...props}>\r\n        <SimpleForm>\r\n            <NumberInput disabled source=\"id\" />\r\n            {/* <ReferenceInput source=\"userId\" reference=\"users\">\r\n                <SelectInput optionText=\"id\" />\r\n                <SelectInput optionText=\"name\" />\r\n            </ReferenceInput> */}\r\n            <NumberInput disabled source=\"mangaId\" />\r\n            <NumberInput source=\"banStatus\" />\r\n            <TextInput source=\"volume\" />\r\n            <TextInput source=\"chapter\" />\r\n            <TextInput source=\"title\" />\r\n            <ArrayInput source=\"imgList\">\r\n                <SimpleFormIterator>\r\n                    <NumberInput source=\"w\" />\r\n                    <NumberInput source=\"h\" />\r\n                    <TextInput source=\"url\" />\r\n                </SimpleFormIterator>\r\n            </ArrayInput>\r\n            <DateInput source=\"createdAt\" />\r\n            <DateInput source=\"updatedAt\" />\r\n            {/* <TextInput source=\"body\" />\r\n            <TextInput multiline source=\"body\" /> */}\r\n        </SimpleForm>\r\n    </Edit>\r\n);","import * as React from \"react\";\r\nimport { Create, Edit, SimpleForm, TextInput, DateInput, ReferenceManyField, Datagrid, TextField, DateField, EditButton } from 'react-admin';\r\n// import TextInput from 'ra-input--text';\r\n\r\nexport const NewsCreate = (props) => (\r\n    <Create {...props}>\r\n        <SimpleForm>\r\n          <TextInput source=\"text\"  />\r\n        </SimpleForm>\r\n    </Create>\r\n);\r\n\r\nexport const NewsEdit = (props) => (\r\n    <Edit {...props}>\r\n        <SimpleForm>\r\n          <TextInput source=\"text\"  />\r\n        </SimpleForm>\r\n    </Edit>\r\n);","import * as React from \"react\";\r\nimport { \r\n    List,\r\n    Datagrid,\r\n    TextField,\r\n    EmailField,\r\n    UrlField,\r\n    EditButton,\r\n    BooleanField,\r\n    DateField,\r\n    Edit,\r\n    SimpleForm,\r\n    TextInput,\r\n    SelectInput,\r\n    ReferenceInput,\r\n    NumberInput,\r\n    BooleanInput,\r\n    DateInput,\r\n    ReferenceArrayInput,\r\n    SelectArrayInput,\r\n    NumberField,\r\n    ArrayInput,\r\n    SimpleFormIterator,\r\n    SearchInput,\r\n    QuickFilter,\r\n    Filter\r\n} from 'react-admin';\r\n\r\nconst Filter1 = props => (\r\n    <Filter {...props}>\r\n        <SearchInput label=\"Title\" source=\"title\" alwaysOn />\r\n        {/* <SearchInput label=\"banStatus\" source=\"banStatus\" alwaysOn /> */}\r\n    </Filter>\r\n);\r\nexport const MangaList = props => (\r\n<List {...props} filters={<Filter1 />}>\r\n        <Datagrid rowClick=\"edit\">\r\n            <TextField disabled source=\"id\" />\r\n            {/* <ReferenceField source=\"userId\" reference=\"users\">\r\n                <SelectField optionText=\"id\" />\r\n                <SelectField optionText=\"name\" />\r\n            </ReferenceField> */}\r\n            \r\n            <TextField source=\"title\" />\r\n            <TextField source=\"englishTitle\" />\r\n            <TextField source=\"otherTitles\" />\r\n            <TextField source=\"author\" />\r\n            <TextField source=\"description\" />\r\n            <NumberField source=\"year\" />\r\n            <NumberField source=\"viewsCount\" />\r\n            <TextField source=\"ratingValue\" />\r\n            {/* <TextField source=\"email\" />\r\n            <TextField source=\"username\" />\r\n            <TextField source=\"location\" />\r\n            <TextField source=\"firstName\" />\r\n            <TextField source=\"lastName\" />\r\n            <NumberField source=\"gender\" />\r\n            <TextField source=\"imgUrl\" />\r\n            <TextField source=\"coverUrl\" />\r\n            <BooleanField source=\"isAdmin\"/>\r\n            <BooleanField source=\"isOnline\"/>\r\n            <BooleanField source=\"showProfile\"/>\r\n            <BooleanField source=\"friendliness\"/> */}\r\n            <NumberField source=\"banStatus\" />\r\n            <DateField source=\"createdAt\" />\r\n            <DateField source=\"updatedAt\" />\r\n        </Datagrid>\r\n    </List>\r\n);\r\n\r\nexport const MangaEdit = props => (\r\n    <Edit {...props}>\r\n        <SimpleForm>\r\n            <TextInput disabled source=\"id\" />\r\n            {/* <ReferenceInput source=\"userId\" reference=\"users\">\r\n                <SelectInput optionText=\"id\" />\r\n                <SelectInput optionText=\"name\" />\r\n            </ReferenceInput> */}\r\n            <TextInput source=\"imgUrl\" />\r\n            <TextInput source=\"title\" />\r\n            <TextInput source=\"englishTitle\" />\r\n            <TextInput source=\"author\" />\r\n            <TextInput source=\"description\" />\r\n            <NumberInput source=\"year\" />\r\n            <NumberInput source=\"viewsCount\" />\r\n            <NumberField source=\"statusId\" />\r\n            <ArrayInput source=\"otherTitles\">\r\n                <SimpleFormIterator>\r\n                    <TextInput />\r\n                </SimpleFormIterator>\r\n            </ArrayInput>\r\n            {/* <TextInput source=\"email\" />\r\n            <TextInput source=\"username\" />\r\n            <TextInput source=\"location\" />\r\n            <TextInput source=\"firstName\" />\r\n            <TextInput source=\"lastName\" />\r\n            <NumberInput source=\"gender\" />\r\n            <TextInput source=\"imgUrl\" />\r\n            <TextInput source=\"coverUrl\" />\r\n            <BooleanInput source=\"isAdmin\"/>\r\n            <BooleanInput source=\"isOnline\"/>\r\n            <BooleanInput source=\"showProfile\"/>\r\n            <BooleanInput source=\"friendliness\"/> */}\r\n            <NumberInput source=\"banStatus\" />\r\n            <DateInput source=\"createdAt\" />\r\n            <DateInput source=\"updatedAt\" />\r\n            {/* <ArrayInput source=\"genre\">\r\n                <SimpleFormIterator>\r\n                    <TextInput />\r\n                </SimpleFormIterator>\r\n            </ArrayInput> */}\r\n            {/* <ReferenceArrayInput source=\"genre\" reference=\"genre\" allowEmpty>\r\n                <SelectArrayInput optionText=\"name\" />\r\n            </ReferenceArrayInput> */}\r\n        </SimpleForm>\r\n    </Edit>\r\n);","import decodeJwt from 'jwt-decode';\r\n\r\nconst authProvider = {\r\n  login: ({ username, password }) => {\r\n    const request = new Request(`${process.env.REACT_APP_API_BASE}/auth/login`, {\r\n        method: 'POST',\r\n        body: JSON.stringify({ username, password }),\r\n        headers: new Headers({ 'Content-Type': 'application/json' }),\r\n    });\r\n    return fetch(request)\r\n        .then(response => {\r\n            if (response.status < 200 || response.status >= 300) {\r\n                throw new Error(response.statusText);\r\n            }\r\n            return response.json();\r\n        })\r\n        .then((user) => {\r\n            console.log(user)\r\n            const decodedToken = decodeJwt(user.access_token);\r\n            if (decodedToken.isAdmin){\r\n                console.log(decodedToken)\r\n                localStorage.setItem('atoken', user.access_token);\r\n                localStorage.setItem('permissions', \"admin\");\r\n            }\r\n            else {throw new Error('тебе нельзя')}\r\n        });\r\n},\r\nlogout: () => {\r\n    localStorage.removeItem('atoken');\r\n    localStorage.removeItem('permissions');\r\n    return Promise.resolve();\r\n},\r\ncheckError: error => {\r\n    // ...\r\n},\r\ncheckAuth: () => {\r\n    return localStorage.getItem('atoken') ? Promise.resolve() : Promise.reject();\r\n},\r\ngetPermissions: () => {\r\n    const role = localStorage.getItem('permissions');\r\n    return role ? Promise.resolve(role) : Promise.reject();\r\n}\r\n};\r\nexport default authProvider;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n// const response = await axios.get(`${process.env.REACT_APP_API_BASE}/chapter/${chapterId}`, params)\nimport { Admin, Resource, ListGuesser,EditGuesser,CreateGuesser,fetchUtils  } from 'react-admin';\nimport crudProvider from '@fusionworks/ra-data-nest-crud'\nimport { UserList,UserEdit } from './users';\nimport { CommentList,CommentEdit } from './comment';\nimport { ChapterList,ChapterEdit } from './chapter';\nimport { NewsCreate,NewsEdit } from './news';\nimport { MangaList,MangaEdit } from './manga';\nimport authProvider from './authProvider';\n// import simpleRestProvider from 'ra-data-simple-rest';\n\nconst httpClient = (url, options = {}) => {\n    if (!options.headers) {\n        options.headers = new Headers({ Accept: 'application/json' });\n    }\n    \n    const atoken = localStorage.getItem('atoken');\n    options.headers.set('Authorization', `Bearer ${atoken}`);\n    return fetchUtils.fetchJson(url, options);\n};\nconst dataProvider = crudProvider(`${process.env.REACT_APP_API_BASE}/admin`, httpClient);\n\n// const dataProvider = crudProvider(`${process.env.REACT_APP_API_BASE}/admin`);\n\nconst App = () => <Admin dataProvider={dataProvider} authProvider={authProvider} >\n  <Resource name=\"user\"  list={UserList} edit={UserEdit}/>\n  <Resource name=\"comment\"  list={CommentList} edit={CommentEdit}/>\n  <Resource name=\"manga\"  list={MangaList} edit={MangaEdit}/>\n  <Resource name=\"chapter\"  list={ChapterList} edit={ChapterEdit}/>\n  <Resource name=\"genre\"  list={ListGuesser} edit={EditGuesser}/>\n  <Resource name=\"format\"  list={ListGuesser} edit={EditGuesser}/>\n  <Resource name=\"type\"  list={ListGuesser} edit={EditGuesser}/>\n  <Resource name=\"status\"  list={ListGuesser} edit={EditGuesser}/>\n  <Resource name=\"news\"  list={ListGuesser} edit={NewsEdit} create={NewsCreate}/>\n</Admin>;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}